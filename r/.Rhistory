t_max     = max(tiempo_salida,  na.rm = TRUE),
.groups   = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,       # rango en segundos
duracion_min = duracion_seg / 60,   # pasamos a minutos
# Entran y salen el mismo número de vehículos, así que la fórmula es la misma:
entradas_por_min = total_veh / duracion_min,
salidas_por_min  = total_veh / duracion_min
)
# ------------------------------
# 3) Promediar la tasa en los días disponibles
#    para cada (rotonda, horario).
# ------------------------------
df_mean <- df_dias %>%
group_by(rotonda, horario) %>%
summarise(
mean_entradas = mean(entradas_por_min, na.rm = TRUE),
mean_salidas  = mean(salidas_por_min,  na.rm = TRUE),
.groups = "drop"
)
# ------------------------------
# 4) Pasar a formato 'largo' para tener
#    "Entradas" y "Salidas" en una columna
# ------------------------------
df_long <- df_mean %>%
pivot_longer(
cols = c("mean_entradas", "mean_salidas"),
names_to = "tipo",
values_to = "valor"
) %>%
mutate(
tipo = case_when(
tipo == "mean_entradas" ~ "Entradas",
tipo == "mean_salidas"  ~ "Salidas",
TRUE ~ tipo
)
)
# ------------------------------
# 5) Heatmap final
#    X: horario, Y: rotonda
#    Facet: Entradas vs Salidas
# ------------------------------
ggplot(df_long, aes(x = horario, y = rotonda, fill = valor)) +
geom_tile() +
# Para poner el valor en cada celda
geom_text(aes(label = round(valor, 2)), color = "black") +
facet_wrap(~ tipo) +
labs(
title = "Media de Vehículos/min por rotonda-horario (promedio de días)",
x = "Horario",
y = "Rotonda",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# ------------------------------
# 1) Lectura de datos y librerías
# ------------------------------
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("merged.csv")
# ------------------------------
# FUNCION AUXILIAR:
# Calcula vehiculos por minuto agrupando por variables elegidas
# ------------------------------
calcular_vehiculos_por_min <- function(.data, grouping_vars) {
# grouping_vars será un vector con los nombres de las variables para agrupar
.data %>%
group_by(across(all_of(grouping_vars))) %>%
summarise(
total_veh = n(),  # número de vehículos (cada fila 1 veh)
t_inicio  = min(tiempo_entrada, na.rm = TRUE),
t_fin     = max(tiempo_salida, na.rm = TRUE),
duracion_observacion = t_fin - t_inicio,   # en segundos
.groups = "drop"
) %>%
mutate(
# pasamos a minutos la duración
duracion_observacion_min = duracion_observacion / 60,
# calculamos vehículos por minuto
vehiculos_por_min = total_veh / duracion_observacion_min
)
}
# ------------------------------
# 2) Heatmap: rotonda, horario, entrada
# ------------------------------
df_entradas <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "entrada"))
ggplot(df_entradas, aes(x = horario, y = factor(entrada), fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario, ENTRADA",
x = "Horario",
y = "Entrada",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# ------------------------------
# 3) Heatmap: rotonda, horario, salida
# ------------------------------
df_salidas <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "salida"))
ggplot(df_salidas, aes(x = horario, y = factor(salida), fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario, SALIDA",
x = "Horario",
y = "Salida",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# ------------------------------
# 4) Heatmap: rotonda, horario, día
# ------------------------------
df_por_dia <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "dia"))
ggplot(df_por_dia, aes(x = horario, y = dia, fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario y día",
x = "Horario",
y = "Día",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# ------------------------------
# 5) Heatmap: rotonda, horario, tipo de vehículo
# ------------------------------
df_por_tipo <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "tipo"))
ggplot(df_por_tipo, aes(x = horario, y = tipo, fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario y tipo",
x = "Horario",
y = "Tipo de vehículo",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# ------------------------------
# FIN DEL SCRIPT
# ------------------------------
# ------------------------------
# 1) Lectura de datos y librerías
# ------------------------------
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("merged.csv")
# ------------------------------
# 2) Agrupar por rotonda, horario, dia
#    y calcular vehículos por minuto
# ------------------------------
df_dias <- data %>%
group_by(rotonda, horario, dia) %>%
summarise(
total_veh = n(),  # cada fila = un vehículo
t_min     = min(tiempo_entrada, na.rm = TRUE),
t_max     = max(tiempo_salida,  na.rm = TRUE),
.groups   = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,       # rango en segundos
duracion_min = duracion_seg / 60,   # pasamos a minutos
# Entran y salen el mismo número de vehículos, así que la fórmula es la misma:
entradas_por_min = total_veh / duracion_min,
salidas_por_min  = total_veh / duracion_min
)
# ------------------------------
# 3) Promediar la tasa en los días disponibles
#    para cada (rotonda, horario).
# ------------------------------
df_mean <- df_dias %>%
group_by(rotonda, horario) %>%
summarise(
mean_entradas = mean(entradas_por_min, na.rm = TRUE),
mean_salidas  = mean(salidas_por_min,  na.rm = TRUE),
.groups = "drop"
)
# ------------------------------
# 4) Pasar a formato 'largo' para tener
#    "Entradas" y "Salidas" en una columna
# ------------------------------
df_long <- df_mean %>%
pivot_longer(
cols = c("mean_entradas", "mean_salidas"),
names_to = "tipo",
values_to = "valor"
) %>%
mutate(
tipo = case_when(
tipo == "mean_entradas" ~ "Entradas",
tipo == "mean_salidas"  ~ "Salidas",
TRUE ~ tipo
)
)
# ------------------------------
# 5) Heatmap final
#    X: horario, Y: rotonda
#    Facet: Entradas vs Salidas
# ------------------------------
ggplot(df_long, aes(x = horario, y = rotonda, fill = valor)) +
geom_tile() +
# Para poner el valor en cada celda
geom_text(aes(label = round(valor, 2)), color = "black") +
facet_wrap(~ tipo) +
labs(
title = "Media de Vehículos/min por rotonda-horario (promedio de días)",
x = "Horario",
y = "Rotonda",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# ------------------------------
# 1) Lectura de datos y librerías
# ------------------------------
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("merged.csv")
# ------------------------------
# 2) Agrupar por rotonda, horario, dia
#    y calcular vehículos por minuto
# ------------------------------
df_dias <- data %>%
group_by(rotonda, horario, dia) %>%
summarise(
total_veh = n(),  # cada fila = un vehículo
t_min     = min(tiempo_entrada, na.rm = TRUE),
t_max     = max(tiempo_salida,  na.rm = TRUE),
.groups   = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,       # rango en segundos
duracion_min = duracion_seg / 60,   # pasamos a minutos
# Entran y salen el mismo número de vehículos, así que la fórmula es la misma:
entradas_por_min = total_veh / duracion_min,
salidas_por_min  = total_veh / duracion_min
)
# ------------------------------
# 3) Promediar la tasa en los días disponibles
#    para cada (rotonda, horario).
# ------------------------------
df_mean <- df_dias %>%
group_by(rotonda, horario) %>%
summarise(
mean_entradas = mean(entradas_por_min, na.rm = TRUE),
mean_salidas  = mean(salidas_por_min,  na.rm = TRUE),
.groups = "drop"
)
# ------------------------------
# 4) Pasar a formato 'largo' para tener
#    "Entradas" y "Salidas" en una columna
# ------------------------------
df_long <- df_mean %>%
pivot_longer(
cols = c("mean_entradas", "mean_salidas"),
names_to = "tipo",
values_to = "valor"
) %>%
mutate(
tipo = case_when(
tipo == "mean_entradas" ~ "Entradas",
tipo == "mean_salidas"  ~ "Salidas",
TRUE ~ tipo
)
)
# ------------------------------
# 5) Heatmap final
#    X: horario, Y: rotonda
#    Facet: Entradas vs Salidas
# ------------------------------
ggplot(df_long, aes(x = horario, y = rotonda, fill = valor)) +
geom_tile() +
# Para poner el valor en cada celda
geom_text(aes(label = round(valor, 2)), color = "black") +
facet_wrap(~ tipo) +
labs(
title = "Media de Vehículos/min por rotonda-horario (promedio de días)",
x = "Horario",
y = "Rotonda",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("merged.csv")
# 1) Agrupar para calcular: cuántos vehículos van de 'entrada' a 'salida'
#    en cada rotonda, horario (y, si procede, día).
df_trayectos <- data %>%
group_by(rotonda, horario, entrada, salida) %>%
summarise(
total_veh = n(),  # cada fila es un vehículo
t_min = min(tiempo_entrada, na.rm = TRUE),
t_max = max(tiempo_salida,  na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,
duracion_min = duracion_seg / 60,
veh_por_min  = total_veh / duracion_min
)
# 2) Crear el heatmap de 'entrada' vs 'salida'
#    - Eje X: factor(entrada)
#    - Eje Y: factor(salida)
#    - Color = veh_por_min
#    - Facet por rotonda y horario
ggplot(df_trayectos, aes(x = factor(entrada), y = factor(salida), fill = veh_por_min)) +
geom_tile() +
# Para mostrar el valor numérico en cada celda (redondeado a 2 decimales)
geom_text(aes(label = round(veh_por_min, 2)), color = "black") +
facet_wrap(~ rotonda + horario, ncol = 4) +
labs(
title = "Heatmap: Entrada/Salida (Vehículos/min) por rotonda y horario",
x = "Entrada",
y = "Salida",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("merged.csv")
df_trayectos <- data %>%
group_by(rotonda, horario, entrada, salida) %>%
summarise(
total_veh = n(),
t_min = min(tiempo_entrada, na.rm = TRUE),
t_max = max(tiempo_salida, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,
duracion_min = duracion_seg / 60,
veh_por_min = total_veh / duracion_min
)
ggplot(df_trayectos, aes(x = factor(entrada), y = factor(salida), fill = veh_por_min)) +
geom_tile() +
geom_text(aes(label = round(veh_por_min, 2)), color = "black") +
facet_wrap(~ rotonda + horario, ncol = 4) +
labs(
title = "Heatmap: Entrada/Salida (Vehículos/min) por rotonda y horario",
x = "Entrada",
y = "Salida",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("merged.csv")
calcular_vehiculos_por_min <- function(.data, grouping_vars) {
.data %>%
group_by(across(all_of(grouping_vars))) %>%
summarise(
total_veh = n(),
t_inicio  = min(tiempo_entrada, na.rm = TRUE),
t_fin     = max(tiempo_salida, na.rm = TRUE),
duracion_observacion = t_fin - t_inicio,
.groups = "drop"
) %>%
mutate(
duracion_observacion_min = duracion_observacion / 60,
vehiculos_por_min = total_veh / duracion_observacion_min
)
}
# Heatmap: rotonda, horario, entrada
df_entradas <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "entrada"))
ggplot(df_entradas, aes(x = horario, y = factor(entrada), fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario, ENTRADA",
x = "Horario",
y = "Entrada",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Heatmap: rotonda, horario, salida
df_salidas <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "salida"))
ggplot(df_salidas, aes(x = horario, y = factor(salida), fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario, SALIDA",
x = "Horario",
y = "Salida",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Heatmap: rotonda, horario, día
df_por_dia <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "dia"))
ggplot(df_por_dia, aes(x = horario, y = dia, fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario y día",
x = "Horario",
y = "Día",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Heatmap: rotonda, horario, tipo de vehículo
df_por_tipo <- calcular_vehiculos_por_min(data, c("rotonda", "horario", "tipo"))
ggplot(df_por_tipo, aes(x = horario, y = tipo, fill = vehiculos_por_min)) +
geom_tile() +
geom_text(aes(label = round(vehiculos_por_min, 2)), color = "black") +
facet_wrap(~ rotonda, ncol = 2) +
labs(
title = "Heatmap: Vehículos/min según rotonda, horario y tipo",
x = "Horario",
y = "Tipo de vehículo",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Agrupar por rotonda, horario, dia y calcular vehículos/min
df_dias <- data %>%
group_by(rotonda, horario, dia) %>%
summarise(
total_veh = n(),
t_min = min(tiempo_entrada, na.rm = TRUE),
t_max = max(tiempo_salida, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,
duracion_min = duracion_seg / 60,
entradas_por_min = total_veh / duracion_min,
salidas_por_min  = total_veh / duracion_min
)
# Promediar por rotonda, horario
df_mean <- df_dias %>%
group_by(rotonda, horario) %>%
summarise(
mean_entradas = mean(entradas_por_min, na.rm = TRUE),
mean_salidas  = mean(salidas_por_min,  na.rm = TRUE),
.groups = "drop"
)
# Formato largo para facet Entradas/Salidas
df_long <- df_mean %>%
pivot_longer(
cols = c("mean_entradas", "mean_salidas"),
names_to = "tipo",
values_to = "valor"
) %>%
mutate(
tipo = dplyr::case_when(
tipo == "mean_entradas" ~ "Entradas",
tipo == "mean_salidas"  ~ "Salidas",
TRUE ~ tipo
)
)
ggplot(df_long, aes(x = horario, y = rotonda, fill = valor)) +
geom_tile() +
geom_text(aes(label = round(valor, 2)), color = "black") +
facet_wrap(~ tipo) +
labs(
title = "Media de Vehículos/min por rotonda-horario (promedio de días)",
x = "Horario",
y = "Rotonda",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Trayectos de 'entrada' a 'salida'
df_trayectos <- data %>%
group_by(rotonda, horario, entrada, salida) %>%
summarise(
total_veh = n(),
t_min = min(tiempo_entrada, na.rm = TRUE),
t_max = max(tiempo_salida, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
duracion_seg = t_max - t_min,
duracion_min = duracion_seg / 60,
veh_por_min  = total_veh / duracion_min
)
ggplot(df_trayectos, aes(x = factor(entrada), y = factor(salida), fill = veh_por_min)) +
geom_tile() +
geom_text(aes(label = round(veh_por_min, 2)), color = "black") +
facet_wrap(~ rotonda + horario, ncol = 4) +
labs(
title = "Heatmap: Entrada/Salida (Vehículos/min) por rotonda y horario",
x = "Entrada",
y = "Salida",
fill = "Veh/min"
) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
